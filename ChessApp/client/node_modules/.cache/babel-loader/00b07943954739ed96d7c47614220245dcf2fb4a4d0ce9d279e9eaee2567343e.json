{"ast":null,"code":"var _jsxFileName = \"Z:\\\\IGMProfile\\\\Desktop\\\\hw3-proj-combo-moosegoose100\\\\src\\\\ChessApp\\\\client\\\\src\\\\chat.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chat({\n  socket,\n  name,\n  room\n}) {\n  _s();\n  // useState To Keep Track Of The Message Currently Being Typed\n  const [currentMsg, setCurrentMsg] = React.useState(\"\");\n\n  // Function To Be Called When Send Button Is Pressed, Sends The Message Out To The Other Person In The Room\n  // Not Sure Why It Needs Async, But Intellisense Was Being Rude\n  const sendMessage = async () => {\n    // Only Send A Message If It Isn't Blank\n    if (currentMsg !== \"\") {\n      // All The Data About The Message That Needs To Be Sent To Socket\n      const messageData = {\n        room: room,\n        sender: name,\n        message: currentMsg,\n        timeSent: new Date(Date.now()).getHours() + \":\" + new Date(Date.now()).getMinutes() // Time The Message Was Sent\n      };\n      await socket.emit(\"sendMsg\", messageData); // Reference To Servers Message Sending Function, Passing In Message Data From Client Side\n    }\n  };\n\n  // Called Whenever There Is A Change In The Socket Server\n  useEffect(() => {\n    // Recieve Messages Only Once\n    socket.off(\"recieveMsg\").on(\"recieveMsg\", msgData => {\n      // Log Message Info To Console\n      console.log(msgData);\n    });\n  }, [socket]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"chatbox\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"chat-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Live Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"chat-body\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"chat-footer\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"message-input\",\n        type: \"text\",\n        placeholder: \"Message your oppenent\",\n        onChange: event => {\n          setCurrentMsg(event.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"btn-send\",\n        onClick: sendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n}\n_s(Chat, \"CdE9MMxaARTdILQ+b7edO2l7xEk=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useEffect","jsxDEV","_jsxDEV","Chat","socket","name","room","_s","currentMsg","setCurrentMsg","useState","sendMessage","messageData","sender","message","timeSent","Date","now","getHours","getMinutes","emit","off","on","msgData","console","log","id","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","event","target","value","onClick","_c","$RefreshReg$"],"sources":["Z:/IGMProfile/Desktop/hw3-proj-combo-moosegoose100/src/ChessApp/client/src/chat.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\n\r\nfunction Chat ({ socket, name, room })\r\n{\r\n    // useState To Keep Track Of The Message Currently Being Typed\r\n    const [currentMsg, setCurrentMsg] = React.useState(\"\");\r\n\r\n\r\n    // Function To Be Called When Send Button Is Pressed, Sends The Message Out To The Other Person In The Room\r\n    // Not Sure Why It Needs Async, But Intellisense Was Being Rude\r\n    const sendMessage = async () =>\r\n    {\r\n        // Only Send A Message If It Isn't Blank\r\n        if(currentMsg !== \"\")\r\n        {\r\n            // All The Data About The Message That Needs To Be Sent To Socket\r\n            const messageData = \r\n            {\r\n                room: room,\r\n                sender: name,\r\n                message: currentMsg,\r\n                timeSent: new Date(Date.now()).getHours() + \":\" + new Date(Date.now()).getMinutes(), // Time The Message Was Sent\r\n            }\r\n\r\n            await socket.emit(\"sendMsg\", messageData); // Reference To Servers Message Sending Function, Passing In Message Data From Client Side\r\n        }\r\n    }\r\n\r\n    // Called Whenever There Is A Change In The Socket Server\r\n    useEffect(() =>\r\n    {\r\n        // Recieve Messages Only Once\r\n        socket.off(\"recieveMsg\").on(\"recieveMsg\", (msgData) =>\r\n        {\r\n            // Log Message Info To Console\r\n            console.log(msgData);\r\n        })\r\n    }, [socket])\r\n\r\n    return(\r\n        <div id=\"chatbox\">\r\n            <div id=\"chat-header\">\r\n                <h2>Live Chat</h2>\r\n            </div>\r\n            <div id=\"chat-body\"></div>\r\n            <div id=\"chat-footer\">\r\n                <input id=\"message-input\" type=\"text\" placeholder=\"Message your oppenent\" onChange={(event => {setCurrentMsg(event.target.value);})}/>\r\n                <button id=\"btn-send\" onClick={sendMessage}>Send</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzC,SAASC,IAAIA,CAAE;EAAEC,MAAM;EAAEC,IAAI;EAAEC;AAAK,CAAC,EACrC;EAAAC,EAAA;EACI;EACA,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGV,KAAK,CAACW,QAAQ,CAAC,EAAE,CAAC;;EAGtD;EACA;EACA,MAAMC,WAAW,GAAG,MAAAA,CAAA,KACpB;IACI;IACA,IAAGH,UAAU,KAAK,EAAE,EACpB;MACI;MACA,MAAMI,WAAW,GACjB;QACIN,IAAI,EAAEA,IAAI;QACVO,MAAM,EAAER,IAAI;QACZS,OAAO,EAAEN,UAAU;QACnBO,QAAQ,EAAE,IAAIC,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,GAAG,GAAG,GAAG,IAAIF,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC,CAACE,UAAU,CAAC,CAAC,CAAE;MACzF,CAAC;MAED,MAAMf,MAAM,CAACgB,IAAI,CAAC,SAAS,EAAER,WAAW,CAAC,CAAC,CAAC;IAC/C;EACJ,CAAC;;EAED;EACAZ,SAAS,CAAC,MACV;IACI;IACAI,MAAM,CAACiB,GAAG,CAAC,YAAY,CAAC,CAACC,EAAE,CAAC,YAAY,EAAGC,OAAO,IAClD;MACI;MACAC,OAAO,CAACC,GAAG,CAACF,OAAO,CAAC;IACxB,CAAC,CAAC;EACN,CAAC,EAAE,CAACnB,MAAM,CAAC,CAAC;EAEZ,oBACIF,OAAA;IAAKwB,EAAE,EAAC,SAAS;IAAAC,QAAA,gBACbzB,OAAA;MAAKwB,EAAE,EAAC,aAAa;MAAAC,QAAA,eACjBzB,OAAA;QAAAyB,QAAA,EAAI;MAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjB,CAAC,eACN7B,OAAA;MAAKwB,EAAE,EAAC;IAAW;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAC1B7B,OAAA;MAAKwB,EAAE,EAAC,aAAa;MAAAC,QAAA,gBACjBzB,OAAA;QAAOwB,EAAE,EAAC,eAAe;QAACM,IAAI,EAAC,MAAM;QAACC,WAAW,EAAC,uBAAuB;QAACC,QAAQ,EAAGC,KAAK,IAAI;UAAC1B,aAAa,CAAC0B,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;QAAC;MAAG;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC,eACtI7B,OAAA;QAAQwB,EAAE,EAAC,UAAU;QAACY,OAAO,EAAE3B,WAAY;QAAAgB,QAAA,EAAC;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd;AAACxB,EAAA,CAjDQJ,IAAI;AAAAoC,EAAA,GAAJpC,IAAI;AAmDb,eAAeA,IAAI;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}