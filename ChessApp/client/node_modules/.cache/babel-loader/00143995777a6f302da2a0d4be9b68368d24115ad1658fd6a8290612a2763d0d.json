{"ast":null,"code":"var _jsxFileName = \"Z:\\\\IGMProfile\\\\Desktop\\\\ChessApp\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport io from 'socket.io-client';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io.connect(\"http://localhost:3001\");\n\n// Note: The Documentation Passes A Lot Of These Functions In Line.\n// To Simplify, I Created Separate Functions And Passed Thos To In Line Event Listeners\nconst App = () => {\n  _s();\n  // useState Takes In A Variable That Will Continually Change State, And A Function To Update That State\n  // See Documentation Here https://legacy.reactjs.org/docs/hooks-state.html And Here https://www.w3schools.com/react/react_usestate.asp\n  // We Will Use This For Both The Player Name As Well As The Room Code\n  const [name, setName] = useState(\"\");\n  const [room, setRoom] = useState(\"\");\n\n  // Function To Be Called When Button Is Pressed In Order To Join A Room\n  const joinRoom = () => {\n    // Check That The Name And Room Code Aren't Empty\n    if (name !== \"\" && room !== \"\") {\n      // Emit The Event To The Listener On The Server Side, Passing In The Room Code As The Parameter \n      socket.emit(\"join\", name, room);\n    }\n  };\n  return;\n  /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"login-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Name: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Player Name\",\n        onChange: event => {\n          setName(event.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Room Code: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Room Code\",\n        onChange: event => {\n          setRoom(event.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: joinRoom,\n        children: \"Join Room\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"/fuxhdHyMl4IxVTu2wp8olwlSdE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["io","useState","jsxDEV","_jsxDEV","socket","connect","App","_s","name","setName","room","setRoom","joinRoom","emit","className","children","id","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","event","target","value","onClick","_c","$RefreshReg$"],"sources":["Z:/IGMProfile/Desktop/ChessApp/client/src/App.js"],"sourcesContent":["import './App.css';\nimport io from 'socket.io-client'\nimport { useState } from 'react'\n\nconst socket = io.connect(\"http://localhost:3001\");\n\n// Note: The Documentation Passes A Lot Of These Functions In Line.\n// To Simplify, I Created Separate Functions And Passed Thos To In Line Event Listeners\nconst App = () =>\n{\n  // useState Takes In A Variable That Will Continually Change State, And A Function To Update That State\n  // See Documentation Here https://legacy.reactjs.org/docs/hooks-state.html And Here https://www.w3schools.com/react/react_usestate.asp\n  // We Will Use This For Both The Player Name As Well As The Room Code\n  const [name, setName] = useState(\"\");\n  const [room, setRoom] = useState(\"\");\n\n  // Function To Be Called When Button Is Pressed In Order To Join A Room\n  const joinRoom = () =>\n  {\n    // Check That The Name And Room Code Aren't Empty\n    if (name !== \"\" && room !== \"\")\n    {\n      // Emit The Event To The Listener On The Server Side, Passing In The Room Code As The Parameter \n      socket.emit(\"join\", name, room);\n    }\n  }\n\n  return \n  (\n    <div className=\"App\">\n      <div id=\"login-input\">\n        <h3>Name: </h3>\n        <input type=\"text\" placeholder=\"Player Name\" onChange={(event => {setName(event.target.value);})}/>\n        <h3>Room Code: </h3>\n        <input type=\"text\" placeholder=\"Room Code\" onChange={(event => {setRoom(event.target.value);})}/>\n        <br />\n        <br />\n        <button onClick={joinRoom}>Join Room</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAO,WAAW;AAClB,OAAOA,EAAE,MAAM,kBAAkB;AACjC,SAASC,QAAQ,QAAQ,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEhC,MAAMC,MAAM,GAAGJ,EAAE,CAACK,OAAO,CAAC,uBAAuB,CAAC;;AAElD;AACA;AACA,MAAMC,GAAG,GAAGA,CAAA,KACZ;EAAAC,EAAA;EACE;EACA;EACA;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACS,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;;EAEpC;EACA,MAAMW,QAAQ,GAAGA,CAAA,KACjB;IACE;IACA,IAAIJ,IAAI,KAAK,EAAE,IAAIE,IAAI,KAAK,EAAE,EAC9B;MACE;MACAN,MAAM,CAACS,IAAI,CAAC,MAAM,EAAEL,IAAI,EAAEE,IAAI,CAAC;IACjC;EACF,CAAC;EAED;EACA,aACEP,OAAA;IAAKW,SAAS,EAAC,KAAK;IAAAC,QAAA,eAClBZ,OAAA;MAAKa,EAAE,EAAC,aAAa;MAAAD,QAAA,gBACnBZ,OAAA;QAAAY,QAAA,EAAI;MAAM;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACfjB,OAAA;QAAOkB,IAAI,EAAC,MAAM;QAACC,WAAW,EAAC,aAAa;QAACC,QAAQ,EAAGC,KAAK,IAAI;UAACf,OAAO,CAACe,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;QAAC;MAAG;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC,eACnGjB,OAAA;QAAAY,QAAA,EAAI;MAAW;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACpBjB,OAAA;QAAOkB,IAAI,EAAC,MAAM;QAACC,WAAW,EAAC,WAAW;QAACC,QAAQ,EAAGC,KAAK,IAAI;UAACb,OAAO,CAACa,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;QAAC;MAAG;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC,eACjGjB,OAAA;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACNjB,OAAA;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACNjB,OAAA;QAAQwB,OAAO,EAAEf,QAAS;QAAAG,QAAA,EAAC;MAAS;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1C;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAAb,EAAA,CAjCKD,GAAG;AAAAsB,EAAA,GAAHtB,GAAG;AAmCT,eAAeA,GAAG;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}