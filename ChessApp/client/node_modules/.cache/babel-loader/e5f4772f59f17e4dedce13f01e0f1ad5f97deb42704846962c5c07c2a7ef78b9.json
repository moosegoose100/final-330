{"ast":null,"code":"var Move = require('./move.js');\nfunction Rules() {\n  this.TILES_X = 8;\n  this.TILES_Y = 8;\n  this.WHITE = 'white';\n  this.BLACK = 'black';\n  this.STARTING_PLAYER = this.WHITE;\n  this.PAWN = 'pawn';\n  this.ROOK = 'rook';\n  this.BISHOP = 'bishop';\n  this.KING = 'king';\n  this.QUEEN = 'queen';\n  this.KNIGHT = 'knight';\n  this.START_POSITIONS = [{\n    'colour': this.BLACK,\n    'type': this.ROOK,\n    'position': {\n      'x': 1,\n      'y': 8\n    }\n  }, {\n    'colour': this.BLACK,\n    'type': this.KNIGHT,\n    'position': {\n      'x': 2,\n      'y': 8\n    }\n  }, {\n    'colour': this.BLACK,\n    'type': this.BISHOP,\n    'position': {\n      'x': 3,\n      'y': 8\n    }\n  }, {\n    'colour': this.BLACK,\n    'type': this.QUEEN,\n    'position': {\n      'x': 4,\n      'y': 8\n    }\n  }, {\n    'colour': this.BLACK,\n    'type': this.KING,\n    'position': {\n      'x': 5,\n      'y': 8\n    }\n  }, {\n    'colour': this.BLACK,\n    'type': this.BISHOP,\n    'position': {\n      'x': 6,\n      'y': 8\n    }\n  }, {\n    'colour': this.BLACK,\n    'type': this.KNIGHT,\n    'position': {\n      'x': 7,\n      'y': 8\n    }\n  }, {\n    'colour': this.BLACK,\n    'type': this.ROOK,\n    'position': {\n      'x': 8,\n      'y': 8\n    }\n  }, {\n    'colour': this.BLACK,\n    'type': this.PAWN,\n    'position': {\n      'x': 1,\n      'y': 7\n    }\n  }, {\n    'colour': this.BLACK,\n    'type': this.PAWN,\n    'position': {\n      'x': 2,\n      'y': 7\n    }\n  }, {\n    'colour': this.BLACK,\n    'type': this.PAWN,\n    'position': {\n      'x': 3,\n      'y': 7\n    }\n  }, {\n    'colour': this.BLACK,\n    'type': this.PAWN,\n    'position': {\n      'x': 4,\n      'y': 7\n    }\n  }, {\n    'colour': this.BLACK,\n    'type': this.PAWN,\n    'position': {\n      'x': 5,\n      'y': 7\n    }\n  }, {\n    'colour': this.BLACK,\n    'type': this.PAWN,\n    'position': {\n      'x': 6,\n      'y': 7\n    }\n  }, {\n    'colour': this.BLACK,\n    'type': this.PAWN,\n    'position': {\n      'x': 7,\n      'y': 7\n    }\n  }, {\n    'colour': this.BLACK,\n    'type': this.PAWN,\n    'position': {\n      'x': 8,\n      'y': 7\n    }\n  }, {\n    'colour': this.WHITE,\n    'type': this.ROOK,\n    'position': {\n      'x': 1,\n      'y': 1\n    }\n  }, {\n    'colour': this.WHITE,\n    'type': this.KNIGHT,\n    'position': {\n      'x': 2,\n      'y': 1\n    }\n  }, {\n    'colour': this.WHITE,\n    'type': this.BISHOP,\n    'position': {\n      'x': 3,\n      'y': 1\n    }\n  }, {\n    'colour': this.WHITE,\n    'type': this.QUEEN,\n    'position': {\n      'x': 4,\n      'y': 1\n    }\n  }, {\n    'colour': this.WHITE,\n    'type': this.KING,\n    'position': {\n      'x': 5,\n      'y': 1\n    }\n  }, {\n    'colour': this.WHITE,\n    'type': this.BISHOP,\n    'position': {\n      'x': 6,\n      'y': 1\n    }\n  }, {\n    'colour': this.WHITE,\n    'type': this.KNIGHT,\n    'position': {\n      'x': 7,\n      'y': 1\n    }\n  }, {\n    'colour': this.WHITE,\n    'type': this.ROOK,\n    'position': {\n      'x': 8,\n      'y': 1\n    }\n  }, {\n    'colour': this.WHITE,\n    'type': this.PAWN,\n    'position': {\n      'x': 1,\n      'y': 2\n    }\n  }, {\n    'colour': this.WHITE,\n    'type': this.PAWN,\n    'position': {\n      'x': 2,\n      'y': 2\n    }\n  }, {\n    'colour': this.WHITE,\n    'type': this.PAWN,\n    'position': {\n      'x': 3,\n      'y': 2\n    }\n  }, {\n    'colour': this.WHITE,\n    'type': this.PAWN,\n    'position': {\n      'x': 4,\n      'y': 2\n    }\n  }, {\n    'colour': this.WHITE,\n    'type': this.PAWN,\n    'position': {\n      'x': 5,\n      'y': 2\n    }\n  }, {\n    'colour': this.WHITE,\n    'type': this.PAWN,\n    'position': {\n      'x': 6,\n      'y': 2\n    }\n  }, {\n    'colour': this.WHITE,\n    'type': this.PAWN,\n    'position': {\n      'x': 7,\n      'y': 2\n    }\n  }, {\n    'colour': this.WHITE,\n    'type': this.PAWN,\n    'position': {\n      'x': 8,\n      'y': 2\n    }\n  }];\n}\n;\nRules.prototype.findValidMoves = function (game, from) {\n  var validMoves = [];\n  if (!from.piece) {\n    // just return the empty set; there are no valid moves if there is no piece\n    // on the tile we are looking at.\n    return validMoves;\n  }\n  switch (from.piece.type) {\n    case this.PAWN:\n      // pawns can move two steps forward from starting position, otherwise just one step up, up-left or up-right\n      var offsets = {\n        'black': -1,\n        'white': 1\n      };\n\n      // promotion not implemented!\n      if (game.enPassant) {\n        var enPassant = new Move(from, game.board.getTile(game.enPassant.x, from.y + offsets[from.piece.colour]));\n        enPassant.enPassant = true;\n        validMoves.push(enPassant);\n      }\n      var ahead = game.board.getTile(from.x, from.y + offsets[from.piece.colour]);\n      if (ahead && !ahead.piece) {\n        validMoves.push(new Move(from, ahead));\n      }\n      var aheadLeft = game.board.getTile(from.x - offsets[from.piece.colour], from.y + offsets[from.piece.colour]);\n      if (aheadLeft && aheadLeft.piece && aheadLeft.piece.colour !== from.piece.colour) {\n        validMoves.push(new Move(from, aheadLeft));\n      }\n      var aheadRight = game.board.getTile(from.x + offsets[from.piece.colour], from.y + offsets[from.piece.colour]);\n      if (aheadRight && aheadRight.piece && aheadRight.piece.colour !== from.piece.colour) {\n        validMoves.push(new Move(from, aheadRight));\n      }\n      var doubleAhead = game.board.getTile(from.x, from.y + offsets[from.piece.colour] * 2);\n      if (doubleAhead && from.piece.startingPosition == true && !doubleAhead.piece) {\n        validMoves.push(new Move(from, doubleAhead));\n      }\n      break;\n    case this.ROOK:\n      var offsets = this.straightMovement(from);\n      validMoves = this.getValidMoves(game, from, offsets);\n      break;\n    case this.KNIGHT:\n      var offsets = [{\n        'x': -2,\n        'y': 1\n      }, {\n        'x': -1,\n        'y': 2\n      }, {\n        'x': 1,\n        'y': 2\n      }, {\n        'x': 2,\n        'y': 1\n      }, {\n        'x': 2,\n        'y': -1\n      }, {\n        'x': 1,\n        'y': -2\n      }, {\n        'x': -1,\n        'y': -2\n      }, {\n        'x': -2,\n        'y': -1\n      }];\n      var i = offsets.length;\n      while (i--) {\n        var candidate = game.board.getTile(from.x + offsets[i].x, from.y + offsets[i].y);\n        if (candidate && (!candidate.piece || candidate.piece.colour != from.piece.colour)) {\n          validMoves.push(new Move(from, candidate));\n        }\n      }\n      break;\n    case this.BISHOP:\n      var offsets = this.diagonalMovement(from);\n      validMoves = this.getValidMoves(game, from, offsets);\n      break;\n    case this.QUEEN:\n      var offsets = this.diagonalMovement(from);\n      validMoves.concat(this.getValidMoves(game, from, offsets));\n      offsets = this.straightMovement(from);\n      validMoves = validMoves.concat(this.getValidMoves(game, from, offsets));\n      break;\n    case this.KING:\n      var offsets = [{\n        'x': 0,\n        'y': 1\n      }, {\n        'x': 1,\n        'y': 1\n      }, {\n        'x': 1,\n        'y': 0\n      }, {\n        'x': 1,\n        'y': -1\n      }, {\n        'x': 0,\n        'y': -1\n      }, {\n        'x': -1,\n        'y': -1\n      }, {\n        'x': -1,\n        'y': 0\n      }, {\n        'x': -1,\n        'y': 1\n      }];\n      var i = offsets.length;\n      while (i--) {\n        var candidate = game.board.getTile(from.x + offsets[i].x, from.y + offsets[i].y);\n        if (candidate && (!candidate.piece || candidate.piece.colour != from.piece.colour)) {\n          validMoves.push(new Move(from, candidate));\n        }\n      }\n      break;\n    default:\n      break;\n  }\n  return validMoves;\n};\nRules.prototype.validateMove = function (game, fromTile, toTile) {\n  var result;\n  var validMoves = this.findValidMoves(game, fromTile);\n  var i = validMoves.length;\n  if (fromTile.piece && game.turn === fromTile.piece.colour) {\n    while (i--) {\n      if (fromTile === validMoves[i].from && toTile === validMoves[i].to) {\n        result = validMoves[i];\n        break;\n      }\n    }\n  }\n  return result;\n};\nRules.prototype.straightMovement = function (from) {\n  var offsets = {\n    'pos_x': [],\n    'neg_x': [],\n    'pos_y': [],\n    'neg_y': []\n  };\n\n  // x direction\n  var x = from.x,\n    offset = 1;\n  while (offset + x <= this.TILES_X) {\n    offsets['pos_x'].push({\n      'x': offset,\n      'y': 0\n    });\n    offset++;\n  }\n  x = from.x, offset = -1;\n  while (offset - x > 0) {\n    offsets['neg_x'].push({\n      'x': offset,\n      'y': 0\n    });\n    offset--;\n  }\n\n  // y direction\n  y = from.y, offset = 1;\n  while (offset + y <= this.TILES_Y) {\n    offsets['pos_y'].push({\n      'x': 0,\n      'y': offset\n    });\n    offset++;\n  }\n  y = from.y, offset = -1;\n  while (offset - y > 0) {\n    offsets['neg_y'].push({\n      'x': 0,\n      'y': offset\n    });\n    offset--;\n  }\n  return offsets;\n};\nRules.prototype.diagonalMovement = function (from) {\n  var offsets = {\n    'pos_xy': [],\n    'neg_xy': [],\n    'pos_y_neg_x': [],\n    'neg_y_pos_x': []\n  };\n\n  // positive x and y\n  var x = from.x,\n    y = from.y,\n    offset = 1;\n  while (offset + x <= this.TILES_X && offset + y <= this.TILES_Y) {\n    offsets['pos_xy'].push({\n      'x': offset,\n      'y': offset\n    });\n    offset++;\n  }\n\n  // negative x and y\n  x = from.x, y = from.y, offset = -1;\n  while (offset - x > 0 && offset - y > 0) {\n    offsets['neg_xy'].push({\n      'x': offset,\n      'y': offset\n    });\n    offset--;\n  }\n\n  // y direction\n  y = from.y, x = from.x, offset_x = 1, offset_y = -1;\n  while (offset_x + x <= this.TILES_X && offset_y + y > 0) {\n    offsets['neg_y_pos_x'].push({\n      'x': offset_x,\n      'y': offset_y\n    });\n    offset_x++;\n    offset_y--;\n  }\n  y = from.y, x = from.x, offset_x = -1, offset_y = 1;\n  while (offset_y + y <= this.TILES_Y && offset_x + x > 0) {\n    offsets['pos_y_neg_x'].push({\n      'x': offset_x,\n      'y': offset_y\n    });\n    offset_y++;\n    offset_x--;\n  }\n  return offsets;\n};\nRules.prototype.getValidMoves = function (game, from, offsets) {\n  var validMoves = [];\n  for (var direction in offsets) {\n    var max = offsets[direction].length,\n      i = 0;\n    while (i < max) {\n      var candidate = game.board.getTile(from.x + offsets[direction][i].x, from.y + offsets[direction][i].y);\n      if (candidate && candidate.piece && candidate.piece.colour !== from.piece.colour) {\n        // capture, we can't move further\n        validMoves.push(new Move(from, candidate));\n        break;\n      } else if (candidate && !candidate.piece) {\n        // why, we have a tile, but it's empty, so we can continue forward\n        validMoves.push(new Move(from, candidate));\n      } else {\n        // no candidate, or there is something in the way.\n        break;\n      }\n      i++;\n    }\n  }\n  return validMoves;\n};\nmodule.exports = Rules;","map":{"version":3,"names":["Move","require","Rules","TILES_X","TILES_Y","WHITE","BLACK","STARTING_PLAYER","PAWN","ROOK","BISHOP","KING","QUEEN","KNIGHT","START_POSITIONS","prototype","findValidMoves","game","from","validMoves","piece","type","offsets","enPassant","board","getTile","x","y","colour","push","ahead","aheadLeft","aheadRight","doubleAhead","startingPosition","straightMovement","getValidMoves","i","length","candidate","diagonalMovement","concat","validateMove","fromTile","toTile","result","turn","to","offset","offset_x","offset_y","direction","max","module","exports"],"sources":["Z:/IGMProfile/Desktop/final-330/ChessApp/node_modules/chessjs/lib/rules.js"],"sourcesContent":["var Move = require('./move.js');\n\nfunction Rules() {\n  this.TILES_X = 8;\n  this.TILES_Y = 8;\n\n  this.WHITE = 'white';\n  this.BLACK = 'black';\n\n  this.STARTING_PLAYER = this.WHITE;\n\n  this.PAWN = 'pawn';\n  this.ROOK = 'rook';\n  this.BISHOP = 'bishop';\n  this.KING = 'king';\n  this.QUEEN = 'queen';\n  this.KNIGHT = 'knight';\n\n  this.START_POSITIONS = [\n      {'colour':this.BLACK,'type':this.ROOK, 'position': {'x': 1, 'y':8}},\n      {'colour':this.BLACK,'type':this.KNIGHT, 'position': {'x': 2, 'y':8}},\n      {'colour':this.BLACK,'type':this.BISHOP, 'position': {'x': 3, 'y':8}},\n      {'colour':this.BLACK,'type':this.QUEEN, 'position':  {'x': 4, 'y':8}},\n      {'colour':this.BLACK,'type':this.KING, 'position': {'x': 5, 'y':8}},\n      {'colour':this.BLACK,'type':this.BISHOP, 'position': {'x': 6, 'y':8}},\n      {'colour':this.BLACK,'type':this.KNIGHT, 'position':  {'x': 7, 'y':8}},\n      {'colour':this.BLACK,'type':this.ROOK, 'position': {'x': 8, 'y':8}},\n      {'colour':this.BLACK,'type':this.PAWN, 'position': {'x': 1, 'y':7}},\n      {'colour':this.BLACK,'type':this.PAWN, 'position': {'x': 2, 'y':7}},\n      {'colour':this.BLACK,'type':this.PAWN, 'position': {'x': 3, 'y':7}},\n      {'colour':this.BLACK,'type':this.PAWN, 'position': {'x': 4, 'y':7}},\n      {'colour':this.BLACK,'type':this.PAWN, 'position': {'x': 5, 'y':7}},\n      {'colour':this.BLACK,'type':this.PAWN, 'position': {'x': 6, 'y':7}},\n      {'colour':this.BLACK,'type':this.PAWN, 'position': {'x': 7, 'y':7}},\n      {'colour':this.BLACK,'type':this.PAWN, 'position': {'x': 8, 'y':7}},\n      {'colour':this.WHITE,'type':this.ROOK, 'position': {'x': 1, 'y':1}},\n      {'colour':this.WHITE,'type':this.KNIGHT, 'position': {'x': 2, 'y':1}},\n      {'colour':this.WHITE,'type':this.BISHOP, 'position': {'x': 3, 'y':1}},\n      {'colour':this.WHITE,'type':this.QUEEN, 'position': {'x': 4, 'y':1}},\n      {'colour':this.WHITE,'type':this.KING, 'position': {'x': 5, 'y':1}},\n      {'colour':this.WHITE,'type':this.BISHOP, 'position': {'x': 6, 'y':1}},\n      {'colour':this.WHITE,'type':this.KNIGHT, 'position': {'x': 7, 'y':1}},\n      {'colour':this.WHITE,'type':this.ROOK, 'position': {'x': 8, 'y':1}},\n      {'colour':this.WHITE,'type':this.PAWN, 'position': {'x': 1, 'y':2}},\n      {'colour':this.WHITE,'type':this.PAWN, 'position': {'x': 2, 'y':2}},\n      {'colour':this.WHITE,'type':this.PAWN, 'position': {'x': 3, 'y':2}},\n      {'colour':this.WHITE,'type':this.PAWN, 'position': {'x': 4, 'y':2}},\n      {'colour':this.WHITE,'type':this.PAWN, 'position': {'x': 5, 'y':2}},\n      {'colour':this.WHITE,'type':this.PAWN, 'position': {'x': 6, 'y':2}},\n      {'colour':this.WHITE,'type':this.PAWN, 'position': {'x': 7, 'y':2}},\n      {'colour':this.WHITE,'type':this.PAWN, 'position': {'x': 8, 'y':2}}\n    ];\n  \n};\n\nRules.prototype.findValidMoves = function (game, from) {\n\n  var validMoves = [];\n\n  if (!from.piece) {\n    // just return the empty set; there are no valid moves if there is no piece\n    // on the tile we are looking at.\n    return validMoves;\n  }\n  \n  switch (from.piece.type) {\n    case this.PAWN:\n      // pawns can move two steps forward from starting position, otherwise just one step up, up-left or up-right\n      var offsets = {'black':-1, 'white':1};\n\n      // promotion not implemented!\n      if (game.enPassant) {\n        var enPassant = new Move(from, game.board.getTile(game.enPassant.x, from.y+offsets[from.piece.colour]));          \n        enPassant.enPassant = true;\n        validMoves.push(enPassant);\n      } \n      \n      var ahead = game.board.getTile(from.x, from.y+offsets[from.piece.colour]);\n      if (ahead && !ahead.piece) {\n        validMoves.push(new Move(from, ahead));\n      }\n\n      var aheadLeft = game.board.getTile(from.x-offsets[from.piece.colour], from.y+offsets[from.piece.colour]);\n      if (aheadLeft && aheadLeft.piece && aheadLeft.piece.colour !== from.piece.colour) {\n        validMoves.push(new Move(from, aheadLeft));\n      }\n      \n      var aheadRight = game.board.getTile(from.x+offsets[from.piece.colour], from.y+offsets[from.piece.colour]);\n      if (aheadRight && aheadRight.piece && aheadRight.piece.colour !== from.piece.colour) {\n        validMoves.push(new Move(from, aheadRight));\n      }\n      \n      var doubleAhead = game.board.getTile(from.x, from.y+offsets[from.piece.colour]*2);\n      if (doubleAhead && from.piece.startingPosition == true && !doubleAhead.piece) {\n        validMoves.push(new Move(from, doubleAhead));\n      }\n\n      break;\n    case this.ROOK:\n      var offsets = this.straightMovement(from);\n      validMoves = this.getValidMoves(game, from, offsets);\n\n      break;\n    case this.KNIGHT:\n      var offsets = [\n        {'x':-2, 'y':1},\n        {'x':-1, 'y':2},\n        {'x':1, 'y':2},\n        {'x':2, 'y':1},\n        {'x':2, 'y':-1},\n        {'x':1, 'y':-2},\n        {'x':-1, 'y':-2},\n        {'x':-2, 'y':-1}\n      ];\n\n      var i = offsets.length;\n      while (i--) {\n        var candidate = game.board.getTile(from.x+offsets[i].x, from.y+offsets[i].y);\n        if (candidate && (!candidate.piece || candidate.piece.colour != from.piece.colour)) {\n          validMoves.push(new Move(from, candidate));\n        } \n      }\n      break;\n    case this.BISHOP:\n      var offsets = this.diagonalMovement(from);\n      validMoves = this.getValidMoves(game, from, offsets);\n\n      break;\n    case this.QUEEN:\n      var offsets = this.diagonalMovement(from);\n      validMoves.concat(this.getValidMoves(game, from, offsets)); \n          \n      offsets = this.straightMovement(from);\n      validMoves = validMoves.concat(this.getValidMoves(game, from, offsets)); \n\n      break;\n    case this.KING:\n      var offsets = [\n        {'x': 0, 'y':1},  \n        {'x': 1, 'y':1},  \n        {'x': 1, 'y':0},  \n        {'x': 1, 'y':-1},  \n        {'x': 0, 'y': -1},  \n        {'x': -1, 'y': -1},  \n        {'x': -1, 'y': 0},  \n        {'x': -1, 'y': 1},  \n      ]\n      var i = offsets.length; \n      while (i--) {\n        var candidate = game.board.getTile(from.x+offsets[i].x, from.y+offsets[i].y);\n        if (candidate && (!candidate.piece || candidate.piece.colour != from.piece.colour)) {\n          validMoves.push(new Move(from, candidate));\n        } \n      }\n      break;\n    default:\n      break;\n  }\n\n  return validMoves;\n};\n\nRules.prototype.validateMove = function (game, fromTile, toTile) {\n  var result;\n\n  var validMoves = this.findValidMoves(game, fromTile);\n  var i = validMoves.length;\n\n  if (fromTile.piece && game.turn === fromTile.piece.colour) {\n    while (i--) {\n      if (fromTile === validMoves[i].from \n          && toTile === validMoves[i].to) {\n        result = validMoves[i];\n        break;\n      }\n    }\n  }\n\n  return result;\n};\n\nRules.prototype.straightMovement = function (from) {\n  var offsets = {\n    'pos_x': [],\n    'neg_x': [],\n    'pos_y': [],\n    'neg_y': []\n  };\n\n  // x direction\n  var x = from.x,\n    offset = 1;\n\n  while (offset+x <= this.TILES_X) {\n    offsets['pos_x'].push({'x':offset, 'y':0});\n    offset++;\n  }\n\n  x = from.x,\n    offset = -1;\n  while (offset-x > 0) {\n    offsets['neg_x'].push({'x':offset, 'y':0});\n    offset--;\n  }\n\n  // y direction\n  y = from.y,\n    offset = 1;\n  while (offset+y <= this.TILES_Y) {\n    offsets['pos_y'].push({'x':0, 'y':offset});\n    offset++;\n  }\n\n  y = from.y,\n    offset = -1;\n  while (offset-y > 0) {      \n    offsets['neg_y'].push({'x':0, 'y':offset});\n    offset--;\n  }\n\n  return offsets;\n}\n\nRules.prototype.diagonalMovement = function (from) {\n  var offsets = {\n    'pos_xy': [],\n    'neg_xy': [],\n    'pos_y_neg_x': [],\n    'neg_y_pos_x': []\n  };\n\n  // positive x and y\n  var x = from.x,\n    y = from.y,\n    offset = 1;\n\n  while (offset+x <= this.TILES_X && offset+y <= this.TILES_Y) {\n    offsets['pos_xy'].push({'x':offset, 'y':offset});\n    offset++;\n  }\n\n  // negative x and y\n  x = from.x,\n    y = from.y,\n    offset = -1;\n\n  while (offset-x > 0 && offset-y > 0) {\n    offsets['neg_xy'].push({'x':offset, 'y':offset});\n    offset--;\n  }\n\n  // y direction\n  y = from.y,\n    x = from.x,\n    offset_x = 1,\n    offset_y = -1;\n\n  while (offset_x+x <= this.TILES_X && offset_y+y > 0) {\n    offsets['neg_y_pos_x'].push({'x':offset_x, 'y':offset_y});\n    offset_x++;\n    offset_y--;\n  }\n\n  y = from.y,\n    x = from.x,\n    offset_x = -1,\n    offset_y = 1;\n\n  while (offset_y+y <= this.TILES_Y && offset_x+x > 0) {\n    offsets['pos_y_neg_x'].push({'x':offset_x, 'y':offset_y});\n    offset_y++;\n    offset_x--;\n  }\n\n  return offsets;\n}\n\nRules.prototype.getValidMoves = function (game, from, offsets) {\n  var validMoves = [];\n  for (var direction in offsets) {\n    var max = offsets[direction].length,\n        i = 0;\n\n    while (i<max) {\n      var candidate = game.board.getTile(from.x+offsets[direction][i].x, from.y+offsets[direction][i].y);\n      if (candidate && candidate.piece && candidate.piece.colour !== from.piece.colour) {\n        // capture, we can't move further\n        validMoves.push(new Move(from, candidate));\n        break;\n      } else if (candidate && !candidate.piece) {\n        // why, we have a tile, but it's empty, so we can continue forward\n        validMoves.push(new Move(from, candidate));\n      } else {\n        // no candidate, or there is something in the way.\n        break;\n      }\n      i++;\n    }\n  }\n  return validMoves;\n}\n\nmodule.exports = Rules;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}