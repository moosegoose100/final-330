{"ast":null,"code":"var _jsxFileName = \"Z:\\\\IGMProfile\\\\Desktop\\\\hw3-proj-combo-moosegoose100\\\\src\\\\ChessApp\\\\client\\\\src\\\\chat.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport ScrollToBottom from 'react-scroll-to-bottom'; // https://www.npmjs.com/package/react-scroll-to-bottom\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chat({\n  socket,\n  name,\n  room\n}) {\n  _s();\n  // useState To Keep Track Of The Message Currently Being Typed\n  const [currentMsg, setCurrentMsg] = React.useState(\"\");\n  const [chatLog, setChatLog] = React.useState([]);\n\n  // Function To Be Called When Send Button Is Pressed, Sends The Message Out To The Other Person In The Room\n  // Not Sure Why It Needs Async, But Intellisense Was Being Rude\n  const sendMessage = async () => {\n    // Only Send A Message If It Isn't Blank\n    if (currentMsg !== \"\") {\n      // All The Data About The Message That Needs To Be Sent To Socket\n      const messageData = {\n        room: room,\n        sender: name,\n        message: currentMsg,\n        timeSent: new Date(Date.now()).getHours() + \":\" + new Date(Date.now()).getMinutes() // Time The Message Was Sent\n      };\n      await socket.emit(\"sendMsg\", messageData); // Reference To Servers Message Sending Function, Passing In Message Data From Client Side\n\n      // Append Chat Log With New Message\n      setChatLog(list => [...list, messageData]);\n\n      // Clear Current Message Value, Which Then Clears The Input Box\n      setCurrentMsg(\"\");\n    }\n  };\n\n  // Called Whenever There Is A Change In The Socket Server\n  useEffect(() => {\n    // Recieve Messages Only Once\n    socket.off(\"recieveMsg\").on(\"recieveMsg\", msgData => {\n      // Append Chat Log With New Message\n      setChatLog(list => [...list, msgData]);\n\n      // Log Message Info To Console\n      console.log(msgData);\n    });\n  }, [socket]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"chatbox\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"chat-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Live Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"chat-body\",\n      children: /*#__PURE__*/_jsxDEV(ScrollToBottom, {\n        className: \"msg-container\",\n        children: chatLog.map(messageData => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"message\",\n            id: name === messageData.sender ? \"my-message\" : \"their-message\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                id: \"text-content\",\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: messageData.message\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 63,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 62,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                id: \"message-data\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  id: \"sender-name\",\n                  children: messageData.sender\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 66,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  id: \"send-time\",\n                  children: messageData.timeSent\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 67,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 65,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"chat-footer\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"message-input\",\n        type: \"text\",\n        value: currentMessage,\n        placeholder: \"Message your oppenent\",\n        onChange: event => {\n          setCurrentMsg(event.target.value);\n        },\n        onKeyPress: event => {\n          event.key === \"Enter\" && sendMessage();\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"btn-send\",\n        onClick: sendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n}\n_s(Chat, \"YxrrHOXSgPd2H0MaIxGJ5SzivKc=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useEffect","ScrollToBottom","jsxDEV","_jsxDEV","Chat","socket","name","room","_s","currentMsg","setCurrentMsg","useState","chatLog","setChatLog","sendMessage","messageData","sender","message","timeSent","Date","now","getHours","getMinutes","emit","list","off","on","msgData","console","log","id","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","class","type","value","currentMessage","placeholder","onChange","event","target","onKeyPress","key","onClick","_c","$RefreshReg$"],"sources":["Z:/IGMProfile/Desktop/hw3-proj-combo-moosegoose100/src/ChessApp/client/src/chat.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport ScrollToBottom from 'react-scroll-to-bottom' // https://www.npmjs.com/package/react-scroll-to-bottom\r\n\r\nfunction Chat ({ socket, name, room })\r\n{\r\n    // useState To Keep Track Of The Message Currently Being Typed\r\n    const [currentMsg, setCurrentMsg] = React.useState(\"\");\r\n    const [chatLog, setChatLog] = React.useState([]);\r\n\r\n    // Function To Be Called When Send Button Is Pressed, Sends The Message Out To The Other Person In The Room\r\n    // Not Sure Why It Needs Async, But Intellisense Was Being Rude\r\n    const sendMessage = async () =>\r\n    {\r\n        // Only Send A Message If It Isn't Blank\r\n        if(currentMsg !== \"\")\r\n        {\r\n            // All The Data About The Message That Needs To Be Sent To Socket\r\n            const messageData = \r\n            {\r\n                room: room,\r\n                sender: name,\r\n                message: currentMsg,\r\n                timeSent: new Date(Date.now()).getHours() + \":\" + new Date(Date.now()).getMinutes(), // Time The Message Was Sent\r\n            }\r\n\r\n            await socket.emit(\"sendMsg\", messageData); // Reference To Servers Message Sending Function, Passing In Message Data From Client Side\r\n            \r\n            // Append Chat Log With New Message\r\n            setChatLog((list) => [...list, messageData]);\r\n\r\n            // Clear Current Message Value, Which Then Clears The Input Box\r\n            setCurrentMsg(\"\");\r\n        }\r\n    }\r\n\r\n    // Called Whenever There Is A Change In The Socket Server\r\n    useEffect(() =>\r\n    {\r\n        // Recieve Messages Only Once\r\n        socket.off(\"recieveMsg\").on(\"recieveMsg\", (msgData) =>\r\n        {\r\n            // Append Chat Log With New Message\r\n            setChatLog((list) => [...list, msgData]);\r\n\r\n            // Log Message Info To Console\r\n            console.log(msgData);\r\n        })\r\n    }, [socket])\r\n\r\n    return(\r\n        <div id=\"chatbox\">\r\n            <div id=\"chat-header\">\r\n                <h2>Live Chat</h2>\r\n            </div>\r\n            <div id=\"chat-body\">\r\n                <ScrollToBottom className=\"msg-container\">\r\n                    {chatLog.map((messageData) =>\r\n                        {\r\n                            return (\r\n                            <div class=\"message\" id={name === messageData.sender ? \"my-message\" : \"their-message\"}>\r\n                                <div>\r\n                                    <div id=\"text-content\">\r\n                                        <p>{messageData.message}</p>\r\n                                    </div>\r\n                                    <div id=\"message-data\">\r\n                                        <p id=\"sender-name\">{messageData.sender}</p>\r\n                                        <p id=\"send-time\">{messageData.timeSent}</p>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            );\r\n                        })\r\n                    }\r\n                </ScrollToBottom>\r\n            </div>\r\n            <div id=\"chat-footer\">\r\n                <input id=\"message-input\" type=\"text\" value={currentMessage} placeholder=\"Message your oppenent\" \r\n                onChange={(event => {setCurrentMsg(event.target.value);})}\r\n                onKeyPress={(event) => {event.key === \"Enter\" && sendMessage()}}/>\r\n                <button id=\"btn-send\" onClick={sendMessage}>Send</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}