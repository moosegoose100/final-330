{"ast":null,"code":"var _jsxFileName = \"Z:\\\\IGMProfile\\\\Desktop\\\\final-330\\\\ChessApp\\\\client\\\\src\\\\chat.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport ScrollToBottom from 'react-scroll-to-bottom'; // https://www.npmjs.com/package/react-scroll-to-bottom\nimport { createBoard } from './chessGame.js';\nimport Chessboard from 'chessboardjs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = ({\n  socket,\n  name,\n  room\n}) => {\n  _s();\n  // useState To Keep Track Of The Message Currently Being Typed\n  const [currentMsg, setCurrentMsg] = useState(\"\");\n  const [chatLog, setChatLog] = useState([]);\n\n  // Function To Be Called When Send Button Is Pressed, Sends The Message Out To The Other Person In The Room\n  // Not Sure Why It Needs Async, But Intellisense Was Being Rude\n  const sendMessage = async () => {\n    // Only Send A Message If It Isn't Blank\n    if (currentMsg !== \"\") {\n      // All The Data About The Message That Needs To Be Sent To Socket\n      const messageData = {\n        room: room,\n        sender: name,\n        message: currentMsg,\n        timeSent: new Date(Date.now()).getHours() + \":\" + new Date(Date.now()).getMinutes() // Time The Message Was Sent\n      };\n      await socket.emit(\"sendMsg\", messageData); // Reference To Servers Message Sending Function, Passing In Message Data From Client Side\n\n      // Append Chat Log With New Message\n      setChatLog(list => [...list, messageData]);\n\n      // Clear Current Message Value, Which Then Clears The Input Box\n      setCurrentMsg(\"\");\n    }\n  };\n\n  // Called Whenever There Is A Change In The Socket Server\n  useEffect(() => {\n    // Recieve Messages Only Once\n    socket.off(\"recieveMsg\").on(\"recieveMsg\", msgData => {\n      // Append Chat Log With New Message\n      setChatLog(list => [...list, msgData]);\n\n      // Log Message Info To Console\n      console.log(msgData);\n    });\n  }, [socket]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"gameBoard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"chatbox\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"chat-header\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Live Chat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"chat-body\",\n        children: /*#__PURE__*/_jsxDEV(ScrollToBottom, {\n          className: \"msg-container\",\n          children: chatLog.map(messageData => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"message\",\n              id: name === messageData.sender ? \"my-message\" : \"their-message\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  id: \"text-content\",\n                  children: /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: messageData.message\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 67,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 66,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  id: \"message-data\",\n                  children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                    id: \"sender-name\",\n                    children: messageData.sender\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 70,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    id: \"send-time\",\n                    children: messageData.timeSent\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 71,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 69,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 65,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 33\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"chat-footer\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"message-input\",\n          type: \"text\",\n          value: currentMsg,\n          placeholder: \"Message your oppenent\",\n          onChange: event => {\n            setCurrentMsg(event.target.value);\n          },\n          onKeyPress: event => {\n            event.key === \"Enter\" && sendMessage();\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"btn-send\",\n          onClick: sendMessage,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"script\", {\n      children: \"var board = Chessboard('gameBoard');\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n};\n_s(Chat, \"YxrrHOXSgPd2H0MaIxGJ5SzivKc=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useEffect","useState","ScrollToBottom","createBoard","Chessboard","jsxDEV","_jsxDEV","Chat","socket","name","room","_s","currentMsg","setCurrentMsg","chatLog","setChatLog","sendMessage","messageData","sender","message","timeSent","Date","now","getHours","getMinutes","emit","list","off","on","msgData","console","log","id","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","class","type","value","placeholder","onChange","event","target","onKeyPress","key","onClick","_c","$RefreshReg$"],"sources":["Z:/IGMProfile/Desktop/final-330/ChessApp/client/src/chat.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport ScrollToBottom from 'react-scroll-to-bottom' // https://www.npmjs.com/package/react-scroll-to-bottom\r\nimport {createBoard} from './chessGame.js'\r\nimport Chessboard from 'chessboardjs';\r\n\r\nconst Chat = ({ socket, name, room }) =>\r\n{\r\n    // useState To Keep Track Of The Message Currently Being Typed\r\n    const [currentMsg, setCurrentMsg] = useState(\"\");\r\n    const [chatLog, setChatLog] = useState([]);\r\n\r\n    // Function To Be Called When Send Button Is Pressed, Sends The Message Out To The Other Person In The Room\r\n    // Not Sure Why It Needs Async, But Intellisense Was Being Rude\r\n    const sendMessage = async () =>\r\n    {\r\n        // Only Send A Message If It Isn't Blank\r\n        if(currentMsg !== \"\")\r\n        {\r\n            // All The Data About The Message That Needs To Be Sent To Socket\r\n            const messageData = \r\n            {\r\n                room: room,\r\n                sender: name,\r\n                message: currentMsg,\r\n                timeSent: new Date(Date.now()).getHours() + \":\" + new Date(Date.now()).getMinutes(), // Time The Message Was Sent\r\n            }\r\n\r\n            await socket.emit(\"sendMsg\", messageData); // Reference To Servers Message Sending Function, Passing In Message Data From Client Side\r\n            \r\n            // Append Chat Log With New Message\r\n            setChatLog((list) => [...list, messageData]);\r\n\r\n            // Clear Current Message Value, Which Then Clears The Input Box\r\n            setCurrentMsg(\"\");\r\n        }\r\n    }\r\n\r\n    // Called Whenever There Is A Change In The Socket Server\r\n    useEffect(() =>\r\n    {\r\n        // Recieve Messages Only Once\r\n        socket.off(\"recieveMsg\").on(\"recieveMsg\", (msgData) =>\r\n        {\r\n            // Append Chat Log With New Message\r\n            setChatLog((list) => [...list, msgData]);\r\n\r\n            // Log Message Info To Console\r\n            console.log(msgData);\r\n        })\r\n    }, [socket]);\r\n\r\n    return(\r\n        <div id=\"container\">\r\n            <div id=\"gameBoard\"></div>\r\n            <div id=\"chatbox\">\r\n                <div id=\"chat-header\">\r\n                    <h2>Live Chat</h2>\r\n                </div>\r\n                <div id=\"chat-body\">\r\n                    <ScrollToBottom className=\"msg-container\">\r\n                        {chatLog.map((messageData) =>\r\n                            {\r\n                                return (\r\n                                <div class=\"message\" id={name === messageData.sender ? \"my-message\" : \"their-message\"}>\r\n                                    <div>\r\n                                        <div id=\"text-content\">\r\n                                            <p>{messageData.message}</p>\r\n                                        </div>\r\n                                        <div id=\"message-data\">\r\n                                            <p id=\"sender-name\">{messageData.sender}</p>\r\n                                            <p id=\"send-time\">{messageData.timeSent}</p>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                );\r\n                            })\r\n                        }\r\n                    </ScrollToBottom>\r\n                </div>\r\n                <div id=\"chat-footer\">\r\n                    <input id=\"message-input\" type=\"text\" value={currentMsg} placeholder=\"Message your oppenent\" \r\n                    onChange={(event => {setCurrentMsg(event.target.value);})}\r\n                    onKeyPress={(event) => {event.key === \"Enter\" && sendMessage()}}/>\r\n                    <button id=\"btn-send\" onClick={sendMessage}>Send</button>\r\n                </div>\r\n            </div>\r\n            <script>\r\n                var board = Chessboard('gameBoard');  \r\n            </script>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}